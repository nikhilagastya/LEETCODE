# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def mergeTwoLists(self, l1: ListNode, l2: ListNode) -> ListNode:
        l1 = l1
        l2 = l2
        lists = ListNode(0)
        head = lists
        while l1 and l2:
            if l1.val < l2.val:
                lists.next = l1
                l1 = l1.next
            else:
                lists.next = l2
                l2 = l2.next
            lists = lists.next
        
        if l1 is None:
            lists.next = l2
        else:
            lists.next = l1
        return head.next
        **************************************************OR*************************************
        # Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def mergeTwoLists(self, l1: ListNode, l2: ListNode) -> ListNode:
        if l1 is None and l2 is None:
            return None
        a1=[]
        a2=[]
        while l1:
            a1.append((l1.val))
            l1=l1.next
        while l2:
            a2.append((l2.val))
            l2=l2.next 
        a3=sorted(a1+a2)
        print(a3)
        l3=l4=ListNode((a3[0]))
        for i in range(1,len(a3)):
            l3.next=ListNode((a3[i]))
            l3=l3.next
        return l4
